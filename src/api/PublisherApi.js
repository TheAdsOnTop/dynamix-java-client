/**
 * Dynamix
 * Sign up for Dynamix & grab your token.
 *
 * OpenAPI spec version: v0.1.0
 * Contact: david@theadsontop.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/PagedRequest', 'model/PagedResponsePublisher', 'model/Publisher'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/PagedRequest'), require('../model/PagedResponsePublisher'), require('../model/Publisher'));
  } else {
    // Browser globals (root is window)
    if (!root.Dynamix) {
      root.Dynamix = {};
    }
    root.Dynamix.PublisherApi = factory(root.Dynamix.ApiClient, root.Dynamix.PagedRequest, root.Dynamix.PagedResponsePublisher, root.Dynamix.Publisher);
  }
}(this, function(ApiClient, PagedRequest, PagedResponsePublisher, Publisher) {
  'use strict';

  /**
   * Publisher service.
   * @module api/PublisherApi
   * @version v0.1.0
   */

  /**
   * Constructs a new PublisherApi. 
   * @alias module:api/PublisherApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the bulkResolvePublishers operation.
     * @callback module:api/PublisherApi~bulkResolvePublishersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Publisher>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PublisherResource - bulkResolvePublishers
     * Grab a set of publishers by RID.
     * @param {String} authToken 
     * @param {String} namespace 
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.body 
     * @param {module:api/PublisherApi~bulkResolvePublishersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Publisher>}
     */
    this.bulkResolvePublishers = function(authToken, namespace, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'authToken' is set
      if (authToken === undefined || authToken === null) {
        throw new Error("Missing the required parameter 'authToken' when calling bulkResolvePublishers");
      }

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling bulkResolvePublishers");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Auth-token': authToken,
        'namespace': namespace
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Publisher];

      return this.apiClient.callApi(
        '/api/publisher/bulk/resolve', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePublisher operation.
     * @callback module:api/PublisherApi~deletePublisherCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PublisherResource - deletePublisher
     * Deletes a publisher from the database.
     * @param {String} authToken 
     * @param {String} namespace 
     * @param {String} server 
     * @param {module:api/PublisherApi~deletePublisherCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deletePublisher = function(authToken, namespace, server, callback) {
      var postBody = null;

      // verify the required parameter 'authToken' is set
      if (authToken === undefined || authToken === null) {
        throw new Error("Missing the required parameter 'authToken' when calling deletePublisher");
      }

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling deletePublisher");
      }

      // verify the required parameter 'server' is set
      if (server === undefined || server === null) {
        throw new Error("Missing the required parameter 'server' when calling deletePublisher");
      }


      var pathParams = {
      };
      var queryParams = {
        'server': server,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Auth-token': authToken,
        'namespace': namespace
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/publisher', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllAuthorizedPublishers operation.
     * @callback module:api/PublisherApi~getAllAuthorizedPublishersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedResponsePublisher} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PublisherResource - getAllAuthorizedPublishers
     * Grab all the publishers that the token is authorized for. Requires paging.
     * @param {String} authToken 
     * @param {String} namespace 
     * @param {module:model/PagedRequest} body 
     * @param {module:api/PublisherApi~getAllAuthorizedPublishersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedResponsePublisher}
     */
    this.getAllAuthorizedPublishers = function(authToken, namespace, body, callback) {
      var postBody = body;

      // verify the required parameter 'authToken' is set
      if (authToken === undefined || authToken === null) {
        throw new Error("Missing the required parameter 'authToken' when calling getAllAuthorizedPublishers");
      }

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling getAllAuthorizedPublishers");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getAllAuthorizedPublishers");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Auth-token': authToken,
        'namespace': namespace
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PagedResponsePublisher;

      return this.apiClient.callApi(
        '/api/publisher/authorized', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the registerPublisher operation.
     * @callback module:api/PublisherApi~registerPublisherCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PublisherResource - registerPublisher
     * Registers a content consumer.
     * @param {String} authToken 
     * @param {String} namespace 
     * @param {module:model/Publisher} body 
     * @param {module:api/PublisherApi~registerPublisherCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.registerPublisher = function(authToken, namespace, body, callback) {
      var postBody = body;

      // verify the required parameter 'authToken' is set
      if (authToken === undefined || authToken === null) {
        throw new Error("Missing the required parameter 'authToken' when calling registerPublisher");
      }

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling registerPublisher");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling registerPublisher");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Auth-Token': authToken,
        'namespace': namespace
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/publisher', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePublisher operation.
     * @callback module:api/PublisherApi~updatePublisherCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PublisherResource - updatePublisher
     * Updates the publisher with the provided value.
     * @param {String} authToken 
     * @param {String} namespace 
     * @param {String} server 
     * @param {module:model/Publisher} body 
     * @param {module:api/PublisherApi~updatePublisherCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updatePublisher = function(authToken, namespace, server, body, callback) {
      var postBody = body;

      // verify the required parameter 'authToken' is set
      if (authToken === undefined || authToken === null) {
        throw new Error("Missing the required parameter 'authToken' when calling updatePublisher");
      }

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling updatePublisher");
      }

      // verify the required parameter 'server' is set
      if (server === undefined || server === null) {
        throw new Error("Missing the required parameter 'server' when calling updatePublisher");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updatePublisher");
      }


      var pathParams = {
      };
      var queryParams = {
        'server': server,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Auth-token': authToken,
        'namespace': namespace
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/publisher', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
