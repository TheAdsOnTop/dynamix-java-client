/**
 * Dynamix
 * Sign up for Dynamix & grab your token.
 *
 * OpenAPI spec version: v0.1.0
 * Contact: david@theadsontop.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ContentRequest', 'model/InputStream', 'model/PagedRequest', 'model/PagedResponseContentRequest'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ContentRequest'), require('../model/InputStream'), require('../model/PagedRequest'), require('../model/PagedResponseContentRequest'));
  } else {
    // Browser globals (root is window)
    if (!root.Dynamix) {
      root.Dynamix = {};
    }
    root.Dynamix.DefaultSourceContentApi = factory(root.Dynamix.ApiClient, root.Dynamix.ContentRequest, root.Dynamix.InputStream, root.Dynamix.PagedRequest, root.Dynamix.PagedResponseContentRequest);
  }
}(this, function(ApiClient, ContentRequest, InputStream, PagedRequest, PagedResponseContentRequest) {
  'use strict';

  /**
   * DefaultSourceContent service.
   * @module api/DefaultSourceContentApi
   * @version v0.1.0
   */

  /**
   * Constructs a new DefaultSourceContentApi. 
   * @alias module:api/DefaultSourceContentApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the deleteContent operation.
     * @callback module:api/DefaultSourceContentApi~deleteContentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DefaultSourceContentResource - deleteContent
     * Delete a content delivery entry.
     * @param {String} authToken 
     * @param {String} namespace 
     * @param {String} server 
     * @param {module:api/DefaultSourceContentApi~deleteContentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteContent = function(authToken, namespace, server, callback) {
      var postBody = null;

      // verify the required parameter 'authToken' is set
      if (authToken === undefined || authToken === null) {
        throw new Error("Missing the required parameter 'authToken' when calling deleteContent");
      }

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling deleteContent");
      }

      // verify the required parameter 'server' is set
      if (server === undefined || server === null) {
        throw new Error("Missing the required parameter 'server' when calling deleteContent");
      }


      var pathParams = {
      };
      var queryParams = {
        'server': server,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Auth-token': authToken,
        'namespace': namespace
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/source-engine/default/register', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllAuthorizedContentPaged operation.
     * @callback module:api/DefaultSourceContentApi~getAllAuthorizedContentPagedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedResponseContentRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authToken 
     * @param {String} namespace 
     * @param {module:model/PagedRequest} body 
     * @param {module:api/DefaultSourceContentApi~getAllAuthorizedContentPagedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedResponseContentRequest}
     */
    this.getAllAuthorizedContentPaged = function(authToken, namespace, body, callback) {
      var postBody = body;

      // verify the required parameter 'authToken' is set
      if (authToken === undefined || authToken === null) {
        throw new Error("Missing the required parameter 'authToken' when calling getAllAuthorizedContentPaged");
      }

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling getAllAuthorizedContentPaged");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getAllAuthorizedContentPaged");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Auth-token': authToken,
        'namespace': namespace
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PagedResponseContentRequest;

      return this.apiClient.callApi(
        '/api/source-engine/default/register/paged', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getContentRequest operation.
     * @callback module:api/DefaultSourceContentApi~getContentRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContentRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authToken 
     * @param {String} namespace 
     * @param {String} server 
     * @param {module:api/DefaultSourceContentApi~getContentRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContentRequest}
     */
    this.getContentRequest = function(authToken, namespace, server, callback) {
      var postBody = null;

      // verify the required parameter 'authToken' is set
      if (authToken === undefined || authToken === null) {
        throw new Error("Missing the required parameter 'authToken' when calling getContentRequest");
      }

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling getContentRequest");
      }

      // verify the required parameter 'server' is set
      if (server === undefined || server === null) {
        throw new Error("Missing the required parameter 'server' when calling getContentRequest");
      }


      var pathParams = {
      };
      var queryParams = {
        'server': server,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Auth-token': authToken,
        'namespace': namespace
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ContentRequest;

      return this.apiClient.callApi(
        '/api/source-engine/default/register', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the registerNewContent operation.
     * @callback module:api/DefaultSourceContentApi~registerNewContentCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DefaultSourceContentResource - registerNewContent
     * Set a content delivery entry for a set of content receivers.
     * @param {String} authToken 
     * @param {String} namespace 
     * @param {module:model/ContentRequest} body 
     * @param {module:api/DefaultSourceContentApi~registerNewContentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.registerNewContent = function(authToken, namespace, body, callback) {
      var postBody = body;

      // verify the required parameter 'authToken' is set
      if (authToken === undefined || authToken === null) {
        throw new Error("Missing the required parameter 'authToken' when calling registerNewContent");
      }

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling registerNewContent");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling registerNewContent");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Auth-token': authToken,
        'namespace': namespace
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/source-engine/default/register', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateContent operation.
     * @callback module:api/DefaultSourceContentApi~updateContentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DefaultSourceContentResource - updateContent
     * Update a content delivery entry for a set of content receivers.
     * @param {String} authToken 
     * @param {String} namespace 
     * @param {String} server 
     * @param {module:model/ContentRequest} body 
     * @param {module:api/DefaultSourceContentApi~updateContentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateContent = function(authToken, namespace, server, body, callback) {
      var postBody = body;

      // verify the required parameter 'authToken' is set
      if (authToken === undefined || authToken === null) {
        throw new Error("Missing the required parameter 'authToken' when calling updateContent");
      }

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling updateContent");
      }

      // verify the required parameter 'server' is set
      if (server === undefined || server === null) {
        throw new Error("Missing the required parameter 'server' when calling updateContent");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateContent");
      }


      var pathParams = {
      };
      var queryParams = {
        'server': server,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Auth-token': authToken,
        'namespace': namespace
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/source-engine/default/register', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadFile operation.
     * @callback module:api/DefaultSourceContentApi~uploadFileCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DefaultSourceContentResource - uploadFile
     * Uploads a file to the Ads on Top Content Network.
     * @param {String} authToken 
     * @param {String} namespace 
     * @param {String} metadata 
     * @param {module:model/InputStream} body 
     * @param {module:api/DefaultSourceContentApi~uploadFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.uploadFile = function(authToken, namespace, metadata, body, callback) {
      var postBody = body;

      // verify the required parameter 'authToken' is set
      if (authToken === undefined || authToken === null) {
        throw new Error("Missing the required parameter 'authToken' when calling uploadFile");
      }

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling uploadFile");
      }

      // verify the required parameter 'metadata' is set
      if (metadata === undefined || metadata === null) {
        throw new Error("Missing the required parameter 'metadata' when calling uploadFile");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling uploadFile");
      }


      var pathParams = {
      };
      var queryParams = {
        'metadata': metadata,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Auth-token': authToken,
        'namespace': namespace
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['*/*'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/source-engine/default/register/upload', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
