/**
 * Dynamix
 * Sign up for Dynamix & grab your token.
 *
 * OpenAPI spec version: v0.1.0
 * Contact: david@theadsontop.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Ad', 'model/AdRequestVector', 'model/PopRequest'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Ad'), require('../model/AdRequestVector'), require('../model/PopRequest'));
  } else {
    // Browser globals (root is window)
    if (!root.Dynamix) {
      root.Dynamix = {};
    }
    root.Dynamix.AdSourceAdapterApi = factory(root.Dynamix.ApiClient, root.Dynamix.Ad, root.Dynamix.AdRequestVector, root.Dynamix.PopRequest);
  }
}(this, function(ApiClient, Ad, AdRequestVector, PopRequest) {
  'use strict';

  /**
   * AdSourceAdapter service.
   * @module api/AdSourceAdapterApi
   * @version v0.1.0
   */

  /**
   * Constructs a new AdSourceAdapterApi. 
   * @alias module:api/AdSourceAdapterApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the pop operation.
     * @callback module:api/AdSourceAdapterApi~popCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * AdSourceAdapterResource - pop
     * POP to annotate the advertisement that is delivered.
     * @param {String} authToken 
     * @param {String} namespace 
     * @param {String} publisherRid 
     * @param {module:model/PopRequest} body 
     * @param {module:api/AdSourceAdapterApi~popCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.pop = function(authToken, namespace, publisherRid, body, callback) {
      var postBody = body;

      // verify the required parameter 'authToken' is set
      if (authToken === undefined || authToken === null) {
        throw new Error("Missing the required parameter 'authToken' when calling pop");
      }

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling pop");
      }

      // verify the required parameter 'publisherRid' is set
      if (publisherRid === undefined || publisherRid === null) {
        throw new Error("Missing the required parameter 'publisherRid' when calling pop");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling pop");
      }


      var pathParams = {
      };
      var queryParams = {
        'publisherRid': publisherRid,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Auth-token': authToken,
        'namespace': namespace
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/source/engine/pop', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the produceAd operation.
     * @callback module:api/AdSourceAdapterApi~produceAdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Ad} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * AdSourceAdapterResource - produceAd
     * Produces a ad if available against the given vector.
     * @param {String} authToken 
     * @param {String} namespace 
     * @param {String} adSourceRid 
     * @param {module:model/AdRequestVector} body 
     * @param {module:api/AdSourceAdapterApi~produceAdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Ad}
     */
    this.produceAd = function(authToken, namespace, adSourceRid, body, callback) {
      var postBody = body;

      // verify the required parameter 'authToken' is set
      if (authToken === undefined || authToken === null) {
        throw new Error("Missing the required parameter 'authToken' when calling produceAd");
      }

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling produceAd");
      }

      // verify the required parameter 'adSourceRid' is set
      if (adSourceRid === undefined || adSourceRid === null) {
        throw new Error("Missing the required parameter 'adSourceRid' when calling produceAd");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling produceAd");
      }


      var pathParams = {
      };
      var queryParams = {
        'adSourceRid': adSourceRid,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Auth-token': authToken,
        'namespace': namespace
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Ad;

      return this.apiClient.callApi(
        '/api/source/engine/ad', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
