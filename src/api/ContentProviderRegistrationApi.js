/**
 * Dynamix
 * Sign up for Dynamix & grab your token.
 *
 * OpenAPI spec version: v0.1.0
 * Contact: david@theadsontop.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ContentProviderRegistration', 'model/PagedRequest', 'model/PagedResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ContentProviderRegistration'), require('../model/PagedRequest'), require('../model/PagedResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.Dynamix) {
      root.Dynamix = {};
    }
    root.Dynamix.ContentProviderRegistrationApi = factory(root.Dynamix.ApiClient, root.Dynamix.ContentProviderRegistration, root.Dynamix.PagedRequest, root.Dynamix.PagedResponse);
  }
}(this, function(ApiClient, ContentProviderRegistration, PagedRequest, PagedResponse) {
  'use strict';

  /**
   * ContentProviderRegistration service.
   * @module api/ContentProviderRegistrationApi
   * @version v0.1.0
   */

  /**
   * Constructs a new ContentProviderRegistrationApi. 
   * @alias module:api/ContentProviderRegistrationApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the bulkGetAuthorizedRegistrations operation.
     * @callback module:api/ContentProviderRegistrationApi~bulkGetAuthorizedRegistrationsCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, module:model/{'String': ContentProviderRegistration}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * bulkGetAuthorizedRegistrations
     * 
     * @param {String} authToken 
     * @param {String} namespace 
     * @param {module:api/ContentProviderRegistrationApi~bulkGetAuthorizedRegistrationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, module:model/{'String': ContentProviderRegistration}>}
     */
    this.bulkGetAuthorizedRegistrations = function(authToken, namespace, callback) {
      var postBody = null;

      // verify the required parameter 'authToken' is set
      if (authToken === undefined || authToken === null) {
        throw new Error("Missing the required parameter 'authToken' when calling bulkGetAuthorizedRegistrations");
      }

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling bulkGetAuthorizedRegistrations");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Auth-token': authToken,
        'namespace': namespace
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = {'String': ContentProviderRegistration};

      return this.apiClient.callApi(
        '/api/source/bulk/auth', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bulkResolveContentProviderRegistrations operation.
     * @callback module:api/ContentProviderRegistrationApi~bulkResolveContentProviderRegistrationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ContentProviderRegistration>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * bulkResolveContentProviderRegistrations
     * Resolves a bunch of rids into ContentProviderRegistration objects.
     * @param {String} authToken 
     * @param {String} namespace 
     * @param {Array.<module:model/String>} body 
     * @param {module:api/ContentProviderRegistrationApi~bulkResolveContentProviderRegistrationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ContentProviderRegistration>}
     */
    this.bulkResolveContentProviderRegistrations = function(authToken, namespace, body, callback) {
      var postBody = body;

      // verify the required parameter 'authToken' is set
      if (authToken === undefined || authToken === null) {
        throw new Error("Missing the required parameter 'authToken' when calling bulkResolveContentProviderRegistrations");
      }

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling bulkResolveContentProviderRegistrations");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling bulkResolveContentProviderRegistrations");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Auth-token': authToken,
        'namespace': namespace
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [ContentProviderRegistration];

      return this.apiClient.callApi(
        '/api/source/bulk/resolve', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createContentProviderRegistration operation.
     * @callback module:api/ContentProviderRegistrationApi~createContentProviderRegistrationCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * createContentProviderRegistration
     * Creates a registration for content creation.
     * @param {String} authToken 
     * @param {String} namespace 
     * @param {module:model/ContentProviderRegistration} body 
     * @param {module:api/ContentProviderRegistrationApi~createContentProviderRegistrationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.createContentProviderRegistration = function(authToken, namespace, body, callback) {
      var postBody = body;

      // verify the required parameter 'authToken' is set
      if (authToken === undefined || authToken === null) {
        throw new Error("Missing the required parameter 'authToken' when calling createContentProviderRegistration");
      }

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling createContentProviderRegistration");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createContentProviderRegistration");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Auth-token': authToken,
        'namespace': namespace
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/source', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteContentProviderRegistration operation.
     * @callback module:api/ContentProviderRegistrationApi~deleteContentProviderRegistrationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deleteContentProviderRegistration
     * Delete a registration stored at the rid.
     * @param {String} authToken 
     * @param {String} namespace 
     * @param {String} registrationRid 
     * @param {module:api/ContentProviderRegistrationApi~deleteContentProviderRegistrationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteContentProviderRegistration = function(authToken, namespace, registrationRid, callback) {
      var postBody = null;

      // verify the required parameter 'authToken' is set
      if (authToken === undefined || authToken === null) {
        throw new Error("Missing the required parameter 'authToken' when calling deleteContentProviderRegistration");
      }

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling deleteContentProviderRegistration");
      }

      // verify the required parameter 'registrationRid' is set
      if (registrationRid === undefined || registrationRid === null) {
        throw new Error("Missing the required parameter 'registrationRid' when calling deleteContentProviderRegistration");
      }


      var pathParams = {
      };
      var queryParams = {
        'registrationRid': registrationRid,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Auth-token': authToken,
        'namespace': namespace
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/source', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllContentProviderRegistrations operation.
     * @callback module:api/ContentProviderRegistrationApi~getAllContentProviderRegistrationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getAllContentProviderRegistrations
     * Grab all registrations that this token is authorized for.
     * @param {String} authToken 
     * @param {String} namespace 
     * @param {module:model/PagedRequest} body 
     * @param {module:api/ContentProviderRegistrationApi~getAllContentProviderRegistrationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedResponse}
     */
    this.getAllContentProviderRegistrations = function(authToken, namespace, body, callback) {
      var postBody = body;

      // verify the required parameter 'authToken' is set
      if (authToken === undefined || authToken === null) {
        throw new Error("Missing the required parameter 'authToken' when calling getAllContentProviderRegistrations");
      }

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling getAllContentProviderRegistrations");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getAllContentProviderRegistrations");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Auth-token': authToken,
        'namespace': namespace
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PagedResponse;

      return this.apiClient.callApi(
        '/api/source/paged/auth', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateContentProviderRegistration operation.
     * @callback module:api/ContentProviderRegistrationApi~updateContentProviderRegistrationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateContentProviderRegistration
     * Update the registration at the rid.
     * @param {String} authToken 
     * @param {String} namespace 
     * @param {String} registrationRid 
     * @param {module:model/ContentProviderRegistration} body 
     * @param {module:api/ContentProviderRegistrationApi~updateContentProviderRegistrationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateContentProviderRegistration = function(authToken, namespace, registrationRid, body, callback) {
      var postBody = body;

      // verify the required parameter 'authToken' is set
      if (authToken === undefined || authToken === null) {
        throw new Error("Missing the required parameter 'authToken' when calling updateContentProviderRegistration");
      }

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling updateContentProviderRegistration");
      }

      // verify the required parameter 'registrationRid' is set
      if (registrationRid === undefined || registrationRid === null) {
        throw new Error("Missing the required parameter 'registrationRid' when calling updateContentProviderRegistration");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateContentProviderRegistration");
      }


      var pathParams = {
      };
      var queryParams = {
        'registrationRid': registrationRid,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Auth-token': authToken,
        'namespace': namespace
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/source', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
