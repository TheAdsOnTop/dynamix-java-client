/**
 * Dynamix
 * Sign up for Dynamix & grab your token.
 *
 * OpenAPI spec version: v0.1.0
 * Contact: david@theadsontop.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AotCreditGrant', 'model/AotCreditVault'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AotCreditGrant'), require('../model/AotCreditVault'));
  } else {
    // Browser globals (root is window)
    if (!root.Dynamix) {
      root.Dynamix = {};
    }
    root.Dynamix.DynamixCreditApi = factory(root.Dynamix.ApiClient, root.Dynamix.AotCreditGrant, root.Dynamix.AotCreditVault);
  }
}(this, function(ApiClient, AotCreditGrant, AotCreditVault) {
  'use strict';

  /**
   * DynamixCredit service.
   * @module api/DynamixCreditApi
   * @version v0.1.0
   */

  /**
   * Constructs a new DynamixCreditApi. 
   * @alias module:api/DynamixCreditApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addCredits operation.
     * @callback module:api/DynamixCreditApi~addCreditsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add credits to a vault.
     * Any rid can be used as the vault key. Each Rid has its own vault.
     * @param {String} authToken 
     * @param {String} namespace 
     * @param {String} server 
     * @param {module:model/AotCreditGrant} body 
     * @param {module:api/DynamixCreditApi~addCreditsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addCredits = function(authToken, namespace, server, body, callback) {
      var postBody = body;

      // verify the required parameter 'authToken' is set
      if (authToken === undefined || authToken === null) {
        throw new Error("Missing the required parameter 'authToken' when calling addCredits");
      }

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling addCredits");
      }

      // verify the required parameter 'server' is set
      if (server === undefined || server === null) {
        throw new Error("Missing the required parameter 'server' when calling addCredits");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addCredits");
      }


      var pathParams = {
      };
      var queryParams = {
        'server': server,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Auth-token': authToken,
        'namespace': namespace
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/credit/add', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the checkBalance operation.
     * @callback module:api/DynamixCreditApi~checkBalanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AotCreditVault} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Checks the balance of a given vault.
     * Any rid can be used as the vault key. Each Rid has its own vault.
     * @param {String} authToken 
     * @param {String} namespace 
     * @param {String} server 
     * @param {module:api/DynamixCreditApi~checkBalanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AotCreditVault}
     */
    this.checkBalance = function(authToken, namespace, server, callback) {
      var postBody = null;

      // verify the required parameter 'authToken' is set
      if (authToken === undefined || authToken === null) {
        throw new Error("Missing the required parameter 'authToken' when calling checkBalance");
      }

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling checkBalance");
      }

      // verify the required parameter 'server' is set
      if (server === undefined || server === null) {
        throw new Error("Missing the required parameter 'server' when calling checkBalance");
      }


      var pathParams = {
      };
      var queryParams = {
        'server': server,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Auth-token': authToken,
        'namespace': namespace
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AotCreditVault;

      return this.apiClient.callApi(
        '/api/credit/balance', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
