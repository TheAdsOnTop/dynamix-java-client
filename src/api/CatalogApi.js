/**
 * Dynamix
 * Sign up for Dynamix & grab your token.
 *
 * OpenAPI spec version: v0.1.0
 * Contact: david@theadsontop.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CatalogItem', 'model/CatalogItemPagedRequest', 'model/PagedRequest', 'model/PagedResponse', 'model/PagedSearchQuery'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CatalogItem'), require('../model/CatalogItemPagedRequest'), require('../model/PagedRequest'), require('../model/PagedResponse'), require('../model/PagedSearchQuery'));
  } else {
    // Browser globals (root is window)
    if (!root.Dynamix) {
      root.Dynamix = {};
    }
    root.Dynamix.CatalogApi = factory(root.Dynamix.ApiClient, root.Dynamix.CatalogItem, root.Dynamix.CatalogItemPagedRequest, root.Dynamix.PagedRequest, root.Dynamix.PagedResponse, root.Dynamix.PagedSearchQuery);
  }
}(this, function(ApiClient, CatalogItem, CatalogItemPagedRequest, PagedRequest, PagedResponse, PagedSearchQuery) {
  'use strict';

  /**
   * Catalog service.
   * @module api/CatalogApi
   * @version v0.1.0
   */

  /**
   * Constructs a new CatalogApi. 
   * @alias module:api/CatalogApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createCatalogItem operation.
     * @callback module:api/CatalogApi~createCatalogItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CatalogItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a catalog item
     * 
     * @param {String} authToken 
     * @param {module:model/CatalogItem} body 
     * @param {module:api/CatalogApi~createCatalogItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CatalogItem}
     */
    this.createCatalogItem = function(authToken, body, callback) {
      var postBody = body;

      // verify the required parameter 'authToken' is set
      if (authToken === undefined || authToken === null) {
        throw new Error("Missing the required parameter 'authToken' when calling createCatalogItem");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createCatalogItem");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Auth-token': authToken
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CatalogItem;

      return this.apiClient.callApi(
        '/api/catalog/item', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCatalogItem operation.
     * @callback module:api/CatalogApi~deleteCatalogItemCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Catalog entry
     * 
     * @param {String} authToken 
     * @param {String} itemRid 
     * @param {module:api/CatalogApi~deleteCatalogItemCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteCatalogItem = function(authToken, itemRid, callback) {
      var postBody = null;

      // verify the required parameter 'authToken' is set
      if (authToken === undefined || authToken === null) {
        throw new Error("Missing the required parameter 'authToken' when calling deleteCatalogItem");
      }

      // verify the required parameter 'itemRid' is set
      if (itemRid === undefined || itemRid === null) {
        throw new Error("Missing the required parameter 'itemRid' when calling deleteCatalogItem");
      }


      var pathParams = {
      };
      var queryParams = {
        'itemRid': itemRid,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Auth-token': authToken
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/catalog/item', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCatalogItem operation.
     * @callback module:api/CatalogApi~getCatalogItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CatalogItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a single Catalog Item
     * 
     * @param {String} authToken 
     * @param {String} itemRid 
     * @param {module:api/CatalogApi~getCatalogItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CatalogItem}
     */
    this.getCatalogItem = function(authToken, itemRid, callback) {
      var postBody = null;

      // verify the required parameter 'authToken' is set
      if (authToken === undefined || authToken === null) {
        throw new Error("Missing the required parameter 'authToken' when calling getCatalogItem");
      }

      // verify the required parameter 'itemRid' is set
      if (itemRid === undefined || itemRid === null) {
        throw new Error("Missing the required parameter 'itemRid' when calling getCatalogItem");
      }


      var pathParams = {
      };
      var queryParams = {
        'itemRid': itemRid,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Auth-token': authToken
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CatalogItem;

      return this.apiClient.callApi(
        '/api/catalog/item', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCatalogItems operation.
     * @callback module:api/CatalogApi~getCatalogItemsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CatalogItem>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Catalog Items Paged
     * 
     * @param {String} authToken 
     * @param {module:model/CatalogItemPagedRequest} body 
     * @param {module:api/CatalogApi~getCatalogItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CatalogItem>}
     */
    this.getCatalogItems = function(authToken, body, callback) {
      var postBody = body;

      // verify the required parameter 'authToken' is set
      if (authToken === undefined || authToken === null) {
        throw new Error("Missing the required parameter 'authToken' when calling getCatalogItems");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getCatalogItems");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Auth-token': authToken
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [CatalogItem];

      return this.apiClient.callApi(
        '/api/catalog/item/bulk/get', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listCatalog operation.
     * @callback module:api/CatalogApi~listCatalogCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the Catalog entries
     * 
     * @param {String} authToken 
     * @param {module:model/PagedSearchQuery} body 
     * @param {module:api/CatalogApi~listCatalogCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedResponse}
     */
    this.listCatalog = function(authToken, body, callback) {
      var postBody = body;

      // verify the required parameter 'authToken' is set
      if (authToken === undefined || authToken === null) {
        throw new Error("Missing the required parameter 'authToken' when calling listCatalog");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling listCatalog");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Auth-token': authToken
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PagedResponse;

      return this.apiClient.callApi(
        '/api/catalog/list/search', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listCatalog_0 operation.
     * @callback module:api/CatalogApi~listCatalog_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the Catalog entries
     * 
     * @param {String} authToken 
     * @param {module:model/String} type 
     * @param {module:model/PagedRequest} body 
     * @param {module:api/CatalogApi~listCatalog_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedResponse}
     */
    this.listCatalog_0 = function(authToken, type, body, callback) {
      var postBody = body;

      // verify the required parameter 'authToken' is set
      if (authToken === undefined || authToken === null) {
        throw new Error("Missing the required parameter 'authToken' when calling listCatalog_0");
      }

      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling listCatalog_0");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling listCatalog_0");
      }


      var pathParams = {
      };
      var queryParams = {
        'type': type,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Auth-token': authToken
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PagedResponse;

      return this.apiClient.callApi(
        '/api/catalog/list/type', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCatalogItem operation.
     * @callback module:api/CatalogApi~updateCatalogItemCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Catalog entry
     * 
     * @param {String} authToken 
     * @param {String} itemRid 
     * @param {module:model/CatalogItem} body 
     * @param {module:api/CatalogApi~updateCatalogItemCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateCatalogItem = function(authToken, itemRid, body, callback) {
      var postBody = body;

      // verify the required parameter 'authToken' is set
      if (authToken === undefined || authToken === null) {
        throw new Error("Missing the required parameter 'authToken' when calling updateCatalogItem");
      }

      // verify the required parameter 'itemRid' is set
      if (itemRid === undefined || itemRid === null) {
        throw new Error("Missing the required parameter 'itemRid' when calling updateCatalogItem");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateCatalogItem");
      }


      var pathParams = {
      };
      var queryParams = {
        'itemRid': itemRid,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Auth-token': authToken
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/catalog/item', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
